/* Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2 */
class Solution {
    public int majorityElement(int[] nums) {
        int majorityCount = nums.length/2;

        for (int num : nums) {
            int count = 0;
            for (int elem : nums) {
                if (elem == num) {
                    count += 1;
                }
            }

            if (count > majorityCount) {
                return num;
            }

        }

        return -1;    
    }
}

class Solution {
    public int majorityElement(int[] nums) {
        int count1=0,index=-1;
        
        
        for(int i=0;i<nums.length;i++)
            {int count=0;
                for(int j=0;j<nums.length; j++){
                    if(nums[i]==nums[j])
                    {
                        count++;
                    } if(count1<count)
        {
            count1=count;
                        index=i;
        }
                } 
       
            
            }return nums[index];
    }
}